# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise` gem.
# Please instead update this file by running `bin/tapioca gem devise`.

module ActionController::Base::HelperMethods
  # source://actionpack/7.0.8/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://devise//lib/devise/controllers/helpers.rb#13
  def devise_controller?(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://devise//lib/devise/controllers/helpers.rb#13
  def signed_in?(*args, **_arg1, &block); end

  # source://actionpack/7.0.8/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end

  # source://devise//lib/devise/controllers/helpers.rb#13
  def warden(*args, **_arg1, &block); end
end

# source://devise//lib/devise/rails/routes.rb#28
module ActionDispatch::Routing; end

# source://devise//lib/devise/rails/routes.rb#35
class ActionDispatch::Routing::Mapper
  # source://actionpack/7.0.8/lib/action_dispatch/routing/mapper.rb#2302
  def initialize(set); end

  # source://devise//lib/devise/rails/routes.rb#363
  def as(scope); end

  # source://devise//lib/devise/rails/routes.rb#290
  def authenticate(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise//lib/devise/rails/routes.rb#314
  def authenticated(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise//lib/devise/rails/routes.rb#226
  def devise_for(*resources); end

  # source://devise//lib/devise/rails/routes.rb#363
  def devise_scope(scope); end

  # source://devise//lib/devise/rails/routes.rb#331
  def unauthenticated(scope = T.unsafe(nil)); end

  protected

  # source://devise//lib/devise/rails/routes.rb#477
  def constraints_for(method_to_apply, scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise//lib/devise/rails/routes.rb#390
  def devise_confirmation(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#421
  def devise_omniauth_callback(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#385
  def devise_password(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#402
  def devise_registration(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#377
  def devise_session(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#395
  def devise_unlock(mapping, controllers); end

  # source://devise//lib/devise/rails/routes.rb#509
  def raise_no_devise_method_error!(klass); end

  # source://devise//lib/devise/rails/routes.rb#499
  def raise_no_secret_key; end

  # source://devise//lib/devise/rails/routes.rb#488
  def set_omniauth_path_prefix!(path_prefix); end

  # source://devise//lib/devise/rails/routes.rb#461
  def with_devise_exclusive_scope(new_path, new_as, options); end

  class << self
    # source://actionpack/7.0.8/lib/action_dispatch/routing/mapper.rb#381
    def normalize_name(name); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/mapper.rb#364
    def normalize_path(path); end
  end
end

# source://devise//lib/devise/rails/routes.rb#29
class ActionDispatch::Routing::RouteSet
  include ::Devise::RouteSet

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#366
  def initialize(config = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#615
  def add_polymorphic_mapping(klass, options, &block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#584
  def add_route(mapping, name); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#619
  def add_url_helper(name, options, &block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#395
  def api_only?; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#415
  def append(&block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#849
  def call(env); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#439
  def clear!; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def default_scope; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def default_scope=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#338
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#338
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#461
  def define_mounted_helper(name, script_namer = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#337
  def disable_clear_and_finalize; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#337
  def disable_clear_and_finalize=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#408
  def draw(&block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#338
  def draw_paths; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#338
  def draw_paths=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#385
  def eager_load!; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#580
  def empty?; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#339
  def env_key; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#760
  def extra_keys(options, recall = T.unsafe(nil)); end

  # source://devise//lib/devise/rails/routes.rb#8
  def finalize!; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#792
  def find_relative_url_root(options); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#788
  def find_script_name(options); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def formatter; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def formatter=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#764
  def generate_extras(options, recall = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#488
  def generate_url_helpers(supports_path); end

  def inspect; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#457
  def mounted_helpers; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def named_routes; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def named_routes=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#784
  def optimize_routes_generation?; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#796
  def path_for(options, route_name = T.unsafe(nil), reserved = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#339
  def polymorphic_mappings; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#419
  def prepend(&block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#855
  def recognize_path(path, environment = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#870
  def recognize_path_with_request(req, path, extras, raise_on_missing: T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#391
  def relative_url_root; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#399
  def request_class; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#337
  def resources_path_names; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#337
  def resources_path_names=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def router; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def router=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def routes; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def set; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#336
  def set=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#801
  def url_for(options, route_name = T.unsafe(nil), url_strategy = T.unsafe(nil), method_name = T.unsafe(nil), reserved = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#480
  def url_helpers(supports_path = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#423
  def eval_block(block); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#775
  def generate(route_name, options, recall = T.unsafe(nil), method_name = T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#403
  def make_request(env); end

  class << self
    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#343
    def default_resources_path_names; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#347
    def new_with_config(config); end
  end
end

# source://devise//lib/devise.rb#11
module Devise
  # source://devise//lib/devise.rb#138
  def allow_unconfirmed_access_for; end

  # source://devise//lib/devise.rb#138
  def allow_unconfirmed_access_for=(val); end

  # source://devise//lib/devise.rb#83
  def authentication_keys; end

  # source://devise//lib/devise.rb#83
  def authentication_keys=(val); end

  # source://devise//lib/devise.rb#91
  def case_insensitive_keys; end

  # source://devise//lib/devise.rb#91
  def case_insensitive_keys=(val); end

  # source://devise//lib/devise.rb#265
  def clean_up_csrf_token_on_authentication; end

  # source://devise//lib/devise.rb#265
  def clean_up_csrf_token_on_authentication=(val); end

  # source://devise//lib/devise.rb#142
  def confirm_within; end

  # source://devise//lib/devise.rb#142
  def confirm_within=(val); end

  # source://devise//lib/devise.rb#146
  def confirmation_keys; end

  # source://devise//lib/devise.rb#146
  def confirmation_keys=(val); end

  # source://devise//lib/devise.rb#209
  def default_scope; end

  # source://devise//lib/devise.rb#209
  def default_scope=(val); end

  # source://devise//lib/devise.rb#117
  def email_regexp; end

  # source://devise//lib/devise.rb#117
  def email_regexp=(val); end

  # source://devise//lib/devise.rb#133
  def expire_all_remember_me_on_sign_out; end

  # source://devise//lib/devise.rb#133
  def expire_all_remember_me_on_sign_out=(val); end

  # source://devise//lib/devise.rb#129
  def extend_remember_period; end

  # source://devise//lib/devise.rb#129
  def extend_remember_period=(val); end

  # source://devise//lib/devise.rb#286
  def helpers; end

  # source://devise//lib/devise.rb#99
  def http_authenticatable; end

  # source://devise//lib/devise.rb#99
  def http_authenticatable=(val); end

  # source://devise//lib/devise.rb#103
  def http_authenticatable_on_xhr; end

  # source://devise//lib/devise.rb#103
  def http_authenticatable_on_xhr=(val); end

  # source://devise//lib/devise.rb#79
  def http_authentication_key; end

  # source://devise//lib/devise.rb#79
  def http_authentication_key=(val); end

  # source://devise//lib/devise.rb#111
  def http_authentication_realm; end

  # source://devise//lib/devise.rb#111
  def http_authentication_realm=(val); end

  # source://devise//lib/devise.rb#300
  def last_attempt_warning; end

  # source://devise//lib/devise.rb#300
  def last_attempt_warning=(val); end

  # source://devise//lib/devise.rb#176
  def lock_strategy; end

  # source://devise//lib/devise.rb#176
  def lock_strategy=(val); end

  # source://devise//lib/devise.rb#213
  def mailer_sender; end

  # source://devise//lib/devise.rb#213
  def mailer_sender=(val); end

  # source://devise//lib/devise.rb#278
  def mappings; end

  # source://devise//lib/devise.rb#189
  def maximum_attempts; end

  # source://devise//lib/devise.rb#189
  def maximum_attempts=(val); end

  # source://devise//lib/devise.rb#221
  def navigational_formats; end

  # source://devise//lib/devise.rb#221
  def navigational_formats=(val); end

  # source://devise//lib/devise.rb#282
  def omniauth_configs; end

  # source://devise//lib/devise.rb#261
  def omniauth_path_prefix; end

  # source://devise//lib/devise.rb#261
  def omniauth_path_prefix=(val); end

  # source://devise//lib/devise.rb#107
  def params_authenticatable; end

  # source://devise//lib/devise.rb#107
  def params_authenticatable=(val); end

  # source://devise//lib/devise.rb#296
  def paranoid; end

  # source://devise//lib/devise.rb#296
  def paranoid=(val); end

  # source://devise//lib/devise.rb#244
  def parent_controller; end

  # source://devise//lib/devise.rb#244
  def parent_controller=(val); end

  # source://devise//lib/devise.rb#250
  def parent_mailer; end

  # source://devise//lib/devise.rb#250
  def parent_mailer=(val); end

  # source://devise//lib/devise.rb#121
  def password_length; end

  # source://devise//lib/devise.rb#121
  def password_length=(val); end

  # source://devise//lib/devise.rb#158
  def pepper; end

  # source://devise//lib/devise.rb#158
  def pepper=(val); end

  # source://devise//lib/devise.rb#150
  def reconfirmable; end

  # source://devise//lib/devise.rb#150
  def reconfirmable=(val); end

  # source://devise//lib/devise.rb#272
  def reload_routes; end

  # source://devise//lib/devise.rb#272
  def reload_routes=(val); end

  # source://devise//lib/devise.rb#125
  def remember_for; end

  # source://devise//lib/devise.rb#125
  def remember_for=(val); end

  # source://devise//lib/devise.rb#71
  def rememberable_options; end

  # source://devise//lib/devise.rb#71
  def rememberable_options=(val); end

  # source://devise//lib/devise.rb#87
  def request_keys; end

  # source://devise//lib/devise.rb#87
  def request_keys=(val); end

  # source://devise//lib/devise.rb#197
  def reset_password_keys; end

  # source://devise//lib/devise.rb#197
  def reset_password_keys=(val); end

  # source://devise//lib/devise.rb#201
  def reset_password_within; end

  # source://devise//lib/devise.rb#201
  def reset_password_within=(val); end

  # source://devise//lib/devise.rb#230
  def responder; end

  # source://devise//lib/devise.rb#230
  def responder=(val); end

  # source://devise//lib/devise.rb#256
  def router_name; end

  # source://devise//lib/devise.rb#256
  def router_name=(val); end

  # source://devise//lib/devise.rb#171
  def scoped_views; end

  # source://devise//lib/devise.rb#171
  def scoped_views=(val); end

  # source://devise//lib/devise.rb#67
  def secret_key; end

  # source://devise//lib/devise.rb#67
  def secret_key=(val); end

  # source://devise//lib/devise.rb#162
  def send_email_changed_notification; end

  # source://devise//lib/devise.rb#162
  def send_email_changed_notification=(val); end

  # source://devise//lib/devise.rb#166
  def send_password_change_notification; end

  # source://devise//lib/devise.rb#166
  def send_password_change_notification=(val); end

  # source://devise//lib/devise.rb#308
  def sign_in_after_change_password; end

  # source://devise//lib/devise.rb#308
  def sign_in_after_change_password=(val); end

  # source://devise//lib/devise.rb#205
  def sign_in_after_reset_password; end

  # source://devise//lib/devise.rb#205
  def sign_in_after_reset_password=(val); end

  # source://devise//lib/devise.rb#234
  def sign_out_all_scopes; end

  # source://devise//lib/devise.rb#234
  def sign_out_all_scopes=(val); end

  # source://devise//lib/devise.rb#238
  def sign_out_via; end

  # source://devise//lib/devise.rb#238
  def sign_out_via=(val); end

  # source://devise//lib/devise.rb#217
  def skip_session_storage; end

  # source://devise//lib/devise.rb#217
  def skip_session_storage=(val); end

  # source://devise//lib/devise.rb#75
  def stretches; end

  # source://devise//lib/devise.rb#75
  def stretches=(val); end

  # source://devise//lib/devise.rb#95
  def strip_whitespace_keys; end

  # source://devise//lib/devise.rb#95
  def strip_whitespace_keys=(val); end

  # source://devise//lib/devise.rb#154
  def timeout_in; end

  # source://devise//lib/devise.rb#154
  def timeout_in=(val); end

  # source://devise//lib/devise.rb#304
  def token_generator; end

  # source://devise//lib/devise.rb#304
  def token_generator=(val); end

  # source://devise//lib/devise.rb#193
  def unlock_in; end

  # source://devise//lib/devise.rb#193
  def unlock_in=(val); end

  # source://devise//lib/devise.rb#180
  def unlock_keys; end

  # source://devise//lib/devise.rb#180
  def unlock_keys=(val); end

  # source://devise//lib/devise.rb#185
  def unlock_strategy; end

  # source://devise//lib/devise.rb#185
  def unlock_strategy=(val); end

  # source://devise//lib/devise.rb#291
  def warden_config; end

  # source://devise//lib/devise.rb#291
  def warden_config=(val); end

  class << self
    # source://devise//lib/devise.rb#524
    def activerecord51?; end

    # source://devise//lib/devise.rb#360
    def add_mapping(resource, options); end

    # source://devise//lib/devise.rb#393
    def add_module(module_name, options = T.unsafe(nil)); end

    # source://devise//lib/devise.rb#138
    def allow_unconfirmed_access_for; end

    # source://devise//lib/devise.rb#138
    def allow_unconfirmed_access_for=(val); end

    # source://devise//lib/devise.rb#83
    def authentication_keys; end

    # source://devise//lib/devise.rb#83
    def authentication_keys=(val); end

    # source://devise//lib/devise.rb#340
    def available_router_name; end

    # source://devise//lib/devise.rb#91
    def case_insensitive_keys; end

    # source://devise//lib/devise.rb#91
    def case_insensitive_keys=(val); end

    # source://devise//lib/devise.rb#265
    def clean_up_csrf_token_on_authentication; end

    # source://devise//lib/devise.rb#265
    def clean_up_csrf_token_on_authentication=(val); end

    # source://devise//lib/devise.rb#482
    def configure_warden!; end

    # source://devise//lib/devise.rb#142
    def confirm_within; end

    # source://devise//lib/devise.rb#142
    def confirm_within=(val); end

    # source://devise//lib/devise.rb#146
    def confirmation_keys; end

    # source://devise//lib/devise.rb#146
    def confirmation_keys=(val); end

    # source://devise//lib/devise.rb#209
    def default_scope; end

    # source://devise//lib/devise.rb#209
    def default_scope=(val); end

    # source://devise//lib/devise.rb#117
    def email_regexp; end

    # source://devise//lib/devise.rb#117
    def email_regexp=(val); end

    # source://devise//lib/devise.rb#133
    def expire_all_remember_me_on_sign_out; end

    # source://devise//lib/devise.rb#133
    def expire_all_remember_me_on_sign_out=(val); end

    # source://devise//lib/devise.rb#129
    def extend_remember_period; end

    # source://devise//lib/devise.rb#129
    def extend_remember_period=(val); end

    # source://devise//lib/devise.rb#507
    def friendly_token(length = T.unsafe(nil)); end

    # source://devise//lib/devise.rb#286
    def helpers; end

    # source://devise//lib/devise.rb#99
    def http_authenticatable; end

    # source://devise//lib/devise.rb#99
    def http_authenticatable=(val); end

    # source://devise//lib/devise.rb#103
    def http_authenticatable_on_xhr; end

    # source://devise//lib/devise.rb#103
    def http_authenticatable_on_xhr=(val); end

    # source://devise//lib/devise.rb#79
    def http_authentication_key; end

    # source://devise//lib/devise.rb#79
    def http_authentication_key=(val); end

    # source://devise//lib/devise.rb#111
    def http_authentication_realm; end

    # source://devise//lib/devise.rb#111
    def http_authentication_realm=(val); end

    # source://devise//lib/devise.rb#463
    def include_helpers(scope); end

    # source://devise//lib/devise.rb#300
    def last_attempt_warning; end

    # source://devise//lib/devise.rb#300
    def last_attempt_warning=(val); end

    # source://devise//lib/devise.rb#176
    def lock_strategy; end

    # source://devise//lib/devise.rb#176
    def lock_strategy=(val); end

    # source://devise//lib/devise.rb#349
    def mailer; end

    # source://devise//lib/devise.rb#354
    def mailer=(class_name); end

    # source://devise//lib/devise.rb#213
    def mailer_sender; end

    # source://devise//lib/devise.rb#213
    def mailer_sender=(val); end

    # source://devise//lib/devise.rb#278
    def mappings; end

    # source://devise//lib/devise.rb#189
    def maximum_attempts; end

    # source://devise//lib/devise.rb#189
    def maximum_attempts=(val); end

    # source://devise//lib/devise.rb#221
    def navigational_formats; end

    # source://devise//lib/devise.rb#221
    def navigational_formats=(val); end

    # source://devise//lib/devise.rb#457
    def omniauth(provider, *args); end

    # source://devise//lib/devise.rb#282
    def omniauth_configs; end

    # source://devise//lib/devise.rb#261
    def omniauth_path_prefix; end

    # source://devise//lib/devise.rb#261
    def omniauth_path_prefix=(val); end

    # source://devise//lib/devise.rb#344
    def omniauth_providers; end

    # source://devise//lib/devise.rb#107
    def params_authenticatable; end

    # source://devise//lib/devise.rb#107
    def params_authenticatable=(val); end

    # source://devise//lib/devise.rb#296
    def paranoid; end

    # source://devise//lib/devise.rb#296
    def paranoid=(val); end

    # source://devise//lib/devise.rb#244
    def parent_controller; end

    # source://devise//lib/devise.rb#244
    def parent_controller=(val); end

    # source://devise//lib/devise.rb#250
    def parent_mailer; end

    # source://devise//lib/devise.rb#250
    def parent_mailer=(val); end

    # source://devise//lib/devise.rb#121
    def password_length; end

    # source://devise//lib/devise.rb#121
    def password_length=(val); end

    # source://devise//lib/devise.rb#158
    def pepper; end

    # source://devise//lib/devise.rb#158
    def pepper=(val); end

    # source://devise//lib/devise.rb#150
    def reconfirmable; end

    # source://devise//lib/devise.rb#150
    def reconfirmable=(val); end

    # source://devise//lib/devise.rb#332
    def ref(arg); end

    # source://devise//lib/devise.rb#475
    def regenerate_helpers!; end

    # source://devise//lib/devise.rb#272
    def reload_routes; end

    # source://devise//lib/devise.rb#272
    def reload_routes=(val); end

    # source://devise//lib/devise.rb#125
    def remember_for; end

    # source://devise//lib/devise.rb#125
    def remember_for=(val); end

    # source://devise//lib/devise.rb#71
    def rememberable_options; end

    # source://devise//lib/devise.rb#71
    def rememberable_options=(val); end

    # source://devise//lib/devise.rb#87
    def request_keys; end

    # source://devise//lib/devise.rb#87
    def request_keys=(val); end

    # source://devise//lib/devise.rb#197
    def reset_password_keys; end

    # source://devise//lib/devise.rb#197
    def reset_password_keys=(val); end

    # source://devise//lib/devise.rb#201
    def reset_password_within; end

    # source://devise//lib/devise.rb#201
    def reset_password_within=(val); end

    # source://devise//lib/devise.rb#230
    def responder; end

    # source://devise//lib/devise.rb#230
    def responder=(val); end

    # source://devise//lib/devise.rb#256
    def router_name; end

    # source://devise//lib/devise.rb#256
    def router_name=(val); end

    # source://devise//lib/devise.rb#171
    def scoped_views; end

    # source://devise//lib/devise.rb#171
    def scoped_views=(val); end

    # source://devise//lib/devise.rb#67
    def secret_key; end

    # source://devise//lib/devise.rb#67
    def secret_key=(val); end

    # source://devise//lib/devise.rb#515
    def secure_compare(a, b); end

    # source://devise//lib/devise.rb#162
    def send_email_changed_notification; end

    # source://devise//lib/devise.rb#162
    def send_email_changed_notification=(val); end

    # source://devise//lib/devise.rb#166
    def send_password_change_notification; end

    # source://devise//lib/devise.rb#166
    def send_password_change_notification=(val); end

    # source://devise//lib/devise.rb#313
    def setup; end

    # source://devise//lib/devise.rb#308
    def sign_in_after_change_password; end

    # source://devise//lib/devise.rb#308
    def sign_in_after_change_password=(val); end

    # source://devise//lib/devise.rb#205
    def sign_in_after_reset_password; end

    # source://devise//lib/devise.rb#205
    def sign_in_after_reset_password=(val); end

    # source://devise//lib/devise.rb#234
    def sign_out_all_scopes; end

    # source://devise//lib/devise.rb#234
    def sign_out_all_scopes=(val); end

    # source://devise//lib/devise.rb#238
    def sign_out_via; end

    # source://devise//lib/devise.rb#238
    def sign_out_via=(val); end

    # source://devise//lib/devise.rb#217
    def skip_session_storage; end

    # source://devise//lib/devise.rb#217
    def skip_session_storage=(val); end

    # source://devise//lib/devise.rb#75
    def stretches; end

    # source://devise//lib/devise.rb#75
    def stretches=(val); end

    # source://devise//lib/devise.rb#95
    def strip_whitespace_keys; end

    # source://devise//lib/devise.rb#95
    def strip_whitespace_keys=(val); end

    # source://devise//lib/devise.rb#154
    def timeout_in; end

    # source://devise//lib/devise.rb#154
    def timeout_in=(val); end

    # source://devise//lib/devise.rb#304
    def token_generator; end

    # source://devise//lib/devise.rb#304
    def token_generator=(val); end

    # source://devise//lib/devise.rb#193
    def unlock_in; end

    # source://devise//lib/devise.rb#193
    def unlock_in=(val); end

    # source://devise//lib/devise.rb#180
    def unlock_keys; end

    # source://devise//lib/devise.rb#180
    def unlock_keys=(val); end

    # source://devise//lib/devise.rb#185
    def unlock_strategy; end

    # source://devise//lib/devise.rb#185
    def unlock_strategy=(val); end

    # source://devise//lib/devise.rb#449
    def warden(&block); end

    # source://devise//lib/devise.rb#291
    def warden_config; end

    # source://devise//lib/devise.rb#291
    def warden_config=(val); end
  end
end

# source://devise//lib/devise.rb#54
Devise::ALL = T.let(T.unsafe(nil), Array)

# source://devise//lib/devise.rb#55
Devise::CONTROLLERS = T.let(T.unsafe(nil), Hash)

class Devise::ConfirmationsController < ::DeviseController
  def create; end
  def new; end
  def show; end

  protected

  def after_confirmation_path_for(resource_name, resource); end
  def after_resending_confirmation_instructions_path_for(resource_name); end
  def translation_scope; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://devise//lib/devise.rb#24
module Devise::Controllers; end

# source://devise//lib/devise/controllers/helpers.rb#6
module Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Controllers::Helpers::ClassMethods

  # source://devise//lib/devise/controllers/helpers.rb#215
  def after_sign_in_path_for(resource_or_scope); end

  # source://devise//lib/devise/controllers/helpers.rb#225
  def after_sign_out_path_for(resource_or_scope); end

  # source://devise//lib/devise/controllers/helpers.rb#163
  def allow_params_authentication!; end

  # source://devise//lib/devise/controllers/helpers.rb#151
  def devise_controller?; end

  # source://devise//lib/devise/controllers/helpers.rb#158
  def devise_parameter_sanitizer; end

  # source://devise//lib/devise/controllers/helpers.rb#254
  def handle_unverified_request; end

  # source://devise//lib/devise/controllers/helpers.rb#270
  def is_flashing_format?; end

  # source://devise//lib/devise/controllers/helpers.rb#264
  def is_navigational_format?; end

  # source://devise//lib/devise/controllers/helpers.rb#260
  def request_format; end

  # source://devise//lib/devise/controllers/helpers.rb#235
  def sign_in_and_redirect(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/helpers.rb#245
  def sign_out_and_redirect(resource_or_scope); end

  # source://devise//lib/devise/controllers/helpers.rb#169
  def signed_in_root_path(resource_or_scope); end

  # source://devise//lib/devise/controllers/helpers.rb#142
  def warden; end

  private

  # source://devise//lib/devise/controllers/helpers.rb#276
  def expire_data_after_sign_out!; end

  class << self
    # source://devise//lib/devise/controllers/helpers.rb#112
    def define_helpers(mapping); end
  end
end

# source://devise//lib/devise/controllers/helpers.rb#17
module Devise::Controllers::Helpers::ClassMethods
  # source://devise//lib/devise/controllers/helpers.rb#39
  def devise_group(group_name, opts = T.unsafe(nil)); end

  # source://devise//lib/devise/controllers/helpers.rb#82
  def log_process_action(payload); end
end

# source://devise//lib/devise/controllers/rememberable.rb#8
module Devise::Controllers::Rememberable
  # source://devise//lib/devise/controllers/rememberable.rb#30
  def forget_me(resource); end

  # source://devise//lib/devise/controllers/rememberable.rb#22
  def remember_me(resource); end

  # source://devise//lib/devise/controllers/rememberable.rb#14
  def remember_me_is_active?(resource); end

  protected

  # source://devise//lib/devise/controllers/rememberable.rb#38
  def forget_cookie_values(resource); end

  # source://devise//lib/devise/controllers/rememberable.rb#42
  def remember_cookie_values(resource); end

  # source://devise//lib/devise/controllers/rememberable.rb#51
  def remember_key(resource, scope); end

  class << self
    # source://devise//lib/devise/controllers/rememberable.rb#10
    def cookie_values; end
  end
end

# source://devise//lib/devise/controllers/responder.rb#7
class Devise::Controllers::Responder < ::ActionController::Responder
  class << self
    # source://responders/3.1.0/lib/action_controller/responder.rb#123
    def error_status; end

    # source://responders/3.1.0/lib/action_controller/responder.rb#124
    def redirect_status; end
  end
end

# source://devise//lib/devise/controllers/scoped_views.rb#5
module Devise::Controllers::ScopedViews
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Controllers::ScopedViews::ClassMethods
end

# source://devise//lib/devise/controllers/scoped_views.rb#8
module Devise::Controllers::ScopedViews::ClassMethods
  # source://devise//lib/devise/controllers/scoped_views.rb#13
  def scoped_views=(value); end

  # source://devise//lib/devise/controllers/scoped_views.rb#9
  def scoped_views?; end
end

# source://devise//lib/devise/controllers/sign_in_out.rb#7
module Devise::Controllers::SignInOut
  # source://devise//lib/devise/controllers/sign_in_out.rb#65
  def bypass_sign_in(resource, scope: T.unsafe(nil)); end

  # source://devise//lib/devise/controllers/sign_in_out.rb#33
  def sign_in(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/sign_in_out.rb#80
  def sign_out(resource_or_scope = T.unsafe(nil)); end

  # source://devise//lib/devise/controllers/sign_in_out.rb#95
  def sign_out_all_scopes(lock = T.unsafe(nil)); end

  # source://devise//lib/devise/controllers/sign_in_out.rb#13
  def signed_in?(scope = T.unsafe(nil)); end

  private

  # source://devise//lib/devise/controllers/sign_in_out.rb#108
  def expire_data_after_sign_in!; end

  # source://devise//lib/devise/controllers/sign_in_out.rb#108
  def expire_data_after_sign_out!; end
end

# source://devise//lib/devise/controllers/store_location.rb#10
module Devise::Controllers::StoreLocation
  # source://devise//lib/devise/controllers/store_location.rb#36
  def store_location_for(resource_or_scope, location); end

  # source://devise//lib/devise/controllers/store_location.rb#18
  def stored_location_for(resource_or_scope); end

  private

  # source://devise//lib/devise/controllers/store_location.rb#71
  def add_fragment_back_to_path(uri, path); end

  # source://devise//lib/devise/controllers/store_location.rb#56
  def extract_path_from_location(location); end

  # source://devise//lib/devise/controllers/store_location.rb#45
  def parse_uri(location); end

  # source://devise//lib/devise/controllers/store_location.rb#67
  def remove_domain_from_uri(uri); end

  # source://devise//lib/devise/controllers/store_location.rb#51
  def stored_location_key_for(resource_or_scope); end
end

# source://devise//lib/devise/controllers/url_helpers.rb#30
module Devise::Controllers::UrlHelpers
  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def cancel_registration_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def cancel_registration_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def confirmation_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def confirmation_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def destroy_session_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def destroy_session_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def edit_password_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def edit_password_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def edit_registration_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def edit_registration_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_confirmation_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_confirmation_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_password_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_password_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_registration_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_registration_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_session_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_session_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_unlock_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def new_unlock_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def password_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def password_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def registration_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def registration_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def session_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def session_url(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def unlock_path(resource_or_scope, *args); end

  # source://devise//lib/devise/controllers/url_helpers.rb#49
  def unlock_url(resource_or_scope, *args); end

  private

  # source://devise//lib/devise/controllers/url_helpers.rb#64
  def _devise_route_context; end

  class << self
    # source://devise//lib/devise/controllers/url_helpers.rb#37
    def generate_helpers!(routes = T.unsafe(nil)); end

    # source://devise//lib/devise/controllers/url_helpers.rb#31
    def remove_helpers!; end
  end
end

# source://devise//lib/devise/delegator.rb#5
class Devise::Delegator
  # source://devise//lib/devise/delegator.rb#6
  def call(env); end

  # source://devise//lib/devise/delegator.rb#10
  def failure_app(env); end
end

# source://devise//lib/devise/rails/deprecated_constant_accessor.rb#7
Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

# source://devise//lib/devise/encryptor.rb#6
module Devise::Encryptor
  class << self
    # source://devise//lib/devise/encryptor.rb#14
    def compare(klass, hashed_password, password); end

    # source://devise//lib/devise/encryptor.rb#7
    def digest(klass, password); end
  end
end

# source://devise//lib/devise/rails.rb#7
class Devise::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://devise//lib/devise/failure_app.rb#10
class Devise::FailureApp < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::Devise::Controllers::StoreLocation
  extend ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://devise//lib/devise/failure_app.rb#19
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://devise//lib/devise/failure_app.rb#47
  def http_auth; end

  # source://activesupport/7.0.8/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.8/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.8/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects; end

  # source://actionpack/7.0.8/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects=(val); end

  # source://devise//lib/devise/failure_app.rb#54
  def recall; end

  # source://devise//lib/devise/failure_app.rb#81
  def redirect; end

  # source://devise//lib/devise/failure_app.rb#37
  def respond; end

  protected

  # source://devise//lib/devise/failure_app.rb#238
  def attempted_path; end

  # source://devise//lib/devise/failure_app.rb#185
  def http_auth?; end

  # source://devise//lib/devise/failure_app.rb#199
  def http_auth_body; end

  # source://devise//lib/devise/failure_app.rb#195
  def http_auth_header?; end

  # source://devise//lib/devise/failure_app.rb#100
  def i18n_message(default = T.unsafe(nil)); end

  # source://devise//lib/devise/failure_app.rb#96
  def i18n_options(options); end

  # source://devise//lib/devise/failure_app.rb#256
  def is_flashing_format?; end

  # source://devise//lib/devise/failure_app.rb#250
  def is_navigational_format?; end

  # source://devise//lib/devise/failure_app.rb#211
  def recall_app(app); end

  # source://devise//lib/devise/failure_app.rb#119
  def redirect_url; end

  # source://devise//lib/devise/failure_app.rb#264
  def relative_url_root; end

  # source://devise//lib/devise/failure_app.rb#272
  def relative_url_root?; end

  # source://devise//lib/devise/failure_app.rb#260
  def request_format; end

  # source://devise//lib/devise/failure_app.rb#135
  def route(scope); end

  # source://devise//lib/devise/failure_app.rb#230
  def scope; end

  # source://devise//lib/devise/failure_app.rb#234
  def scope_class; end

  # source://devise//lib/devise/failure_app.rb#139
  def scope_url; end

  # source://devise//lib/devise/failure_app.rb#173
  def skip_format?; end

  # source://devise//lib/devise/failure_app.rb#246
  def store_location!; end

  # source://devise//lib/devise/failure_app.rb#218
  def warden; end

  # source://devise//lib/devise/failure_app.rb#226
  def warden_message; end

  # source://devise//lib/devise/failure_app.rb#222
  def warden_options; end

  private

  # source://devise//lib/devise/failure_app.rb#284
  def rails_51_and_up?; end

  # source://devise//lib/devise/failure_app.rb#280
  def root_path_defined?(context); end

  class << self
    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://devise//lib/devise/failure_app.rb#21
    def call(env); end

    # source://devise//lib/devise/failure_app.rb#29
    def default_url_options(*args); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.8/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.8/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.8/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects; end

    # source://actionpack/7.0.8/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects=(val); end
  end
end

# source://devise//lib/devise.rb#317
class Devise::Getter
  # source://devise//lib/devise.rb#318
  def initialize(name); end

  # source://devise//lib/devise.rb#322
  def get; end
end

# source://devise//lib/devise.rb#34
module Devise::Hooks; end

# source://devise//lib/devise/hooks/proxy.rb#7
class Devise::Hooks::Proxy
  include ::Devise::Controllers::Rememberable
  include ::Devise::Controllers::SignInOut

  # source://devise//lib/devise/hooks/proxy.rb#14
  def initialize(warden); end

  # source://devise//lib/devise/hooks/proxy.rb#12
  def cookies(*_arg0, **_arg1, &_arg2); end

  # source://devise//lib/devise/hooks/proxy.rb#12
  def request(*_arg0, **_arg1, &_arg2); end

  # source://devise//lib/devise/hooks/proxy.rb#18
  def session; end

  # source://devise//lib/devise/hooks/proxy.rb#11
  def warden; end
end

class Devise::Mailer < ::ActionMailer::Base
  include ::Devise::Mailers::Helpers
  include ::Devise::Controllers::ScopedViews
  extend ::Devise::Controllers::ScopedViews::ClassMethods

  def confirmation_instructions(record, token, opts = T.unsafe(nil)); end
  def email_changed(record, opts = T.unsafe(nil)); end
  def password_change(record, opts = T.unsafe(nil)); end
  def reset_password_instructions(record, token, opts = T.unsafe(nil)); end
  def unlock_instructions(record, token, opts = T.unsafe(nil)); end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end
end

# source://devise//lib/devise.rb#38
module Devise::Mailers; end

# source://devise//lib/devise/mailers/helpers.rb#5
module Devise::Mailers::Helpers
  extend ::ActiveSupport::Concern
  include ::Devise::Controllers::ScopedViews

  mixes_in_class_methods ::Devise::Controllers::ScopedViews::ClassMethods

  protected

  # source://devise//lib/devise/mailers/helpers.rb#17
  def devise_mail(record, action, opts = T.unsafe(nil), &block); end

  # source://devise//lib/devise/mailers/helpers.rb#27
  def devise_mapping; end

  # source://devise//lib/devise/mailers/helpers.rb#31
  def headers_for(action, opts); end

  # source://devise//lib/devise/mailers/helpers.rb#22
  def initialize_from_record(record); end

  # source://devise//lib/devise/mailers/helpers.rb#49
  def mailer_from(mapping); end

  # source://devise//lib/devise/mailers/helpers.rb#45
  def mailer_reply_to(mapping); end

  # source://devise//lib/devise/mailers/helpers.rb#53
  def mailer_sender(mapping, sender = T.unsafe(nil)); end

  # source://devise//lib/devise/mailers/helpers.rb#14
  def resource; end

  # source://devise//lib/devise/mailers/helpers.rb#14
  def scope_name; end

  # source://devise//lib/devise/mailers/helpers.rb#87
  def subject_for(key); end

  # source://devise//lib/devise/mailers/helpers.rb#64
  def template_paths; end
end

# source://devise//lib/devise/mapping.rb#26
class Devise::Mapping
  # source://devise//lib/devise/mapping.rb#54
  def initialize(name, options); end

  # source://devise//lib/devise/mapping.rb#98
  def authenticatable?; end

  # source://devise//lib/devise/mapping.rb#27
  def class_name; end

  # source://devise//lib/devise/mapping.rb#115
  def confirmable?; end

  # source://devise//lib/devise/mapping.rb#27
  def controllers; end

  # source://devise//lib/devise/mapping.rb#115
  def database_authenticatable?; end

  # source://devise//lib/devise/mapping.rb#27
  def failure_app; end

  # source://devise//lib/devise/mapping.rb#27
  def format; end

  # source://devise//lib/devise/mapping.rb#102
  def fullpath; end

  # source://devise//lib/devise/mapping.rb#115
  def lockable?; end

  # source://devise//lib/devise/mapping.rb#77
  def modules; end

  # source://devise//lib/devise/mapping.rb#27
  def name; end

  # source://devise//lib/devise/mapping.rb#90
  def no_input_strategies; end

  # source://devise//lib/devise/mapping.rb#115
  def omniauthable?; end

  # source://devise//lib/devise/mapping.rb#27
  def path; end

  # source://devise//lib/devise/mapping.rb#27
  def path_names; end

  # source://devise//lib/devise/mapping.rb#115
  def recoverable?; end

  # source://devise//lib/devise/mapping.rb#115
  def registerable?; end

  # source://devise//lib/devise/mapping.rb#115
  def rememberable?; end

  # source://devise//lib/devise/mapping.rb#27
  def router_name; end

  # source://devise//lib/devise/mapping.rb#94
  def routes; end

  # source://devise//lib/devise/mapping.rb#27
  def scoped_path; end

  # source://devise//lib/devise/mapping.rb#27
  def sign_out_via; end

  # source://devise//lib/devise/mapping.rb#27
  def singular; end

  # source://devise//lib/devise/mapping.rb#86
  def strategies; end

  # source://devise//lib/devise/mapping.rb#115
  def timeoutable?; end

  # source://devise//lib/devise/mapping.rb#82
  def to; end

  # source://devise//lib/devise/mapping.rb#115
  def trackable?; end

  # source://devise//lib/devise/mapping.rb#27
  def used_helpers; end

  # source://devise//lib/devise/mapping.rb#27
  def used_routes; end

  # source://devise//lib/devise/mapping.rb#115
  def validatable?; end

  private

  # source://devise//lib/devise/mapping.rb#144
  def default_constraints(options); end

  # source://devise//lib/devise/mapping.rb#131
  def default_controllers(options); end

  # source://devise//lib/devise/mapping.rb#149
  def default_defaults(options); end

  # source://devise//lib/devise/mapping.rb#123
  def default_failure_app(options); end

  # source://devise//lib/devise/mapping.rb#138
  def default_path_names(options); end

  # source://devise//lib/devise/mapping.rb#166
  def default_used_helpers(options); end

  # source://devise//lib/devise/mapping.rb#154
  def default_used_route(options); end

  class << self
    # source://devise//lib/devise/mapping.rb#113
    def add_module(m); end

    # source://devise//lib/devise/mapping.rb#49
    def find_by_path!(path, path_type = T.unsafe(nil)); end

    # source://devise//lib/devise/mapping.rb#35
    def find_scope!(obj); end
  end
end

# source://devise//lib/devise/controllers/helpers.rb#283
class Devise::MissingWarden < ::StandardError
  # source://devise//lib/devise/controllers/helpers.rb#284
  def initialize; end
end

# source://devise//lib/devise/models.rb#4
module Devise::Models
  # source://devise//lib/devise/models.rb#79
  def devise(*modules); end

  # source://devise//lib/devise/models.rb#116
  def devise_modules_hook!; end

  class << self
    # source://devise//lib/devise/models.rb#54
    def check_fields!(klass); end

    # source://devise//lib/devise/models.rb#31
    def config(mod, *accessors); end
  end
end

# source://devise//lib/devise/models/authenticatable.rb#56
module Devise::Models::Authenticatable
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Authenticatable::ClassMethods

  # source://devise//lib/devise/models/authenticatable.rb#93
  def active_for_authentication?; end

  # source://devise//lib/devise/models/authenticatable.rb#101
  def authenticatable_salt; end

  # source://devise//lib/devise/models/authenticatable.rb#97
  def inactive_message; end

  # source://devise//lib/devise/models/authenticatable.rb#124
  def inspect; end

  # source://devise//lib/devise/models/authenticatable.rb#109
  def serializable_hash(options = T.unsafe(nil)); end

  # source://devise//lib/devise/models/authenticatable.rb#89
  def unauthenticated_message; end

  # source://devise//lib/devise/models/authenticatable.rb#85
  def valid_for_authentication?; end

  protected

  # source://devise//lib/devise/models/authenticatable.rb#218
  def apply_to_attribute_or_variable(attr, method); end

  # source://devise//lib/devise/models/authenticatable.rb#133
  def devise_mailer; end

  # source://devise//lib/devise/models/authenticatable.rb#210
  def downcase_keys; end

  # source://devise//lib/devise/models/authenticatable.rb#200
  def send_devise_notification(notification, *args); end

  # source://devise//lib/devise/models/authenticatable.rb#214
  def strip_whitespace; end

  class << self
    # source://devise//lib/devise/models/authenticatable.rb#75
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def devise_modules; end
    def devise_modules=(value); end
    def devise_modules?; end
  end

  module GeneratedInstanceMethods
    def devise_modules; end
    def devise_modules?; end
  end
end

# source://devise//lib/devise/models/authenticatable.rb#232
module Devise::Models::Authenticatable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def authentication_keys; end

  # source://devise//lib/devise/models.rb#47
  def authentication_keys=(value); end

  # source://devise//lib/devise/models.rb#37
  def case_insensitive_keys; end

  # source://devise//lib/devise/models.rb#47
  def case_insensitive_keys=(value); end

  # source://devise//lib/devise/models/authenticatable.rb#279
  def find_first_by_auth_conditions(tainted_conditions, opts = T.unsafe(nil)); end

  # source://devise//lib/devise/models/authenticatable.rb#275
  def find_for_authentication(tainted_conditions); end

  # source://devise//lib/devise/models/authenticatable.rb#284
  def find_or_initialize_with_error_by(attribute, value, error = T.unsafe(nil)); end

  # source://devise//lib/devise/models/authenticatable.rb#289
  def find_or_initialize_with_errors(required_attributes, attributes, error = T.unsafe(nil)); end

  # source://devise//lib/devise/models.rb#37
  def http_authenticatable; end

  # source://devise//lib/devise/models.rb#47
  def http_authenticatable=(value); end

  # source://devise//lib/devise/models/authenticatable.rb#251
  def http_authenticatable?(strategy); end

  # source://devise//lib/devise/models.rb#37
  def http_authentication_key; end

  # source://devise//lib/devise/models.rb#47
  def http_authentication_key=(value); end

  # source://devise//lib/devise/models.rb#37
  def params_authenticatable; end

  # source://devise//lib/devise/models.rb#47
  def params_authenticatable=(value); end

  # source://devise//lib/devise/models/authenticatable.rb#246
  def params_authenticatable?(strategy); end

  # source://devise//lib/devise/models.rb#37
  def request_keys; end

  # source://devise//lib/devise/models.rb#47
  def request_keys=(value); end

  # source://devise//lib/devise/models/authenticatable.rb#241
  def serialize_from_session(key, salt); end

  # source://devise//lib/devise/models/authenticatable.rb#237
  def serialize_into_session(record); end

  # source://devise//lib/devise/models.rb#37
  def skip_session_storage; end

  # source://devise//lib/devise/models.rb#47
  def skip_session_storage=(value); end

  # source://devise//lib/devise/models.rb#37
  def strip_whitespace_keys; end

  # source://devise//lib/devise/models.rb#47
  def strip_whitespace_keys=(value); end

  protected

  # source://devise//lib/devise/models/authenticatable.rb#308
  def devise_parameter_filter; end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/authenticatable.rb#59
Devise::Models::Authenticatable::UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = T.let(T.unsafe(nil), Array)

# source://devise//lib/devise/models/confirmable.rb#45
module Devise::Models::Confirmable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Confirmable::ClassMethods

  # source://devise//lib/devise/models/confirmable.rb#61
  def initialize(*args, &block); end

  # source://devise//lib/devise/models/confirmable.rb#144
  def active_for_authentication?; end

  # source://devise//lib/devise/models/confirmable.rb#79
  def confirm(args = T.unsafe(nil)); end

  # source://devise//lib/devise/models/confirmable.rb#106
  def confirmed?; end

  # source://devise//lib/devise/models/confirmable.rb#149
  def inactive_message; end

  # source://devise//lib/devise/models/confirmable.rb#110
  def pending_reconfirmation?; end

  # source://devise//lib/devise/models/confirmable.rb#134
  def resend_confirmation_instructions; end

  # source://devise//lib/devise/models/confirmable.rb#115
  def send_confirmation_instructions; end

  # source://devise//lib/devise/models/confirmable.rb#124
  def send_reconfirmation_instructions; end

  # source://devise//lib/devise/models/confirmable.rb#155
  def skip_confirmation!; end

  # source://devise//lib/devise/models/confirmable.rb#161
  def skip_confirmation_notification!; end

  # source://devise//lib/devise/models/confirmable.rb#167
  def skip_reconfirmation!; end

  protected

  # source://devise//lib/devise/models/confirmable.rb#308
  def after_confirmation; end

  # source://devise//lib/devise/models/confirmable.rb#232
  def confirmation_period_expired?; end

  # source://devise//lib/devise/models/confirmable.rb#213
  def confirmation_period_valid?; end

  # source://devise//lib/devise/models/confirmable.rb#187
  def confirmation_required?; end

  # source://devise//lib/devise/models/confirmable.rb#248
  def generate_confirmation_token; end

  # source://devise//lib/devise/models/confirmable.rb#257
  def generate_confirmation_token!; end

  # source://devise//lib/devise/models/confirmable.rb#237
  def pending_any_confirmation; end

  # source://devise//lib/devise/models/confirmable.rb#270
  def postpone_email_change?; end

  # source://devise//lib/devise/models/confirmable.rb#262
  def postpone_email_change_until_confirmation_and_regenerate_confirmation_token; end

  # source://devise//lib/devise/models/confirmable.rb#280
  def reconfirmation_required?; end

  # source://devise//lib/devise/models/confirmable.rb#284
  def send_confirmation_notification?; end

  # source://devise//lib/devise/models/confirmable.rb#290
  def send_email_changed_notification?; end

  # source://devise//lib/devise/models/confirmable.rb#182
  def send_on_create_confirmation_instructions; end

  # source://devise//lib/devise/models/confirmable.rb#175
  def skip_reconfirmation_in_callback!; end

  class << self
    # source://devise//lib/devise/models/confirmable.rb#70
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/confirmable.rb#311
module Devise::Models::Confirmable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def allow_unconfirmed_access_for; end

  # source://devise//lib/devise/models.rb#47
  def allow_unconfirmed_access_for=(value); end

  # source://devise//lib/devise/models/confirmable.rb#329
  def confirm_by_token(confirmation_token); end

  # source://devise//lib/devise/models.rb#37
  def confirm_within; end

  # source://devise//lib/devise/models.rb#47
  def confirm_within=(value); end

  # source://devise//lib/devise/models.rb#37
  def confirmation_keys; end

  # source://devise//lib/devise/models.rb#47
  def confirmation_keys=(value); end

  # source://devise//lib/devise/models/confirmable.rb#357
  def find_by_unconfirmed_email_with_errors(attributes = T.unsafe(nil)); end

  # source://devise//lib/devise/models.rb#37
  def reconfirmable; end

  # source://devise//lib/devise/models.rb#47
  def reconfirmable=(value); end

  # source://devise//lib/devise/models/confirmable.rb#316
  def send_confirmation_instructions(attributes = T.unsafe(nil)); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/database_authenticatable.rb#31
module Devise::Models::DatabaseAuthenticatable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::DatabaseAuthenticatable::ClassMethods

  # source://devise//lib/devise/models/database_authenticatable.rb#42
  def initialize(*args, &block); end

  # source://devise//lib/devise/models/database_authenticatable.rb#172
  def after_database_authentication; end

  # source://devise//lib/devise/models/database_authenticatable.rb#176
  def authenticatable_salt; end

  # source://devise//lib/devise/models/database_authenticatable.rb#76
  def clean_up_passwords; end

  # source://devise//lib/devise/models/database_authenticatable.rb#150
  def destroy_with_password(current_password); end

  # source://devise//lib/devise/models/database_authenticatable.rb#65
  def password=(new_password); end

  # source://devise//lib/devise/models/database_authenticatable.rb#181
  def send_email_changed_notification; end

  # source://devise//lib/devise/models/database_authenticatable.rb#186
  def send_password_change_notification; end

  # source://devise//lib/devise/models/database_authenticatable.rb#49
  def skip_email_changed_notification!; end

  # source://devise//lib/devise/models/database_authenticatable.rb#54
  def skip_password_change_notification!; end

  # source://devise//lib/devise/models/database_authenticatable.rb#87
  def update_with_password(params, *options); end

  # source://devise//lib/devise/models/database_authenticatable.rb#129
  def update_without_password(params, *options); end

  # source://devise//lib/devise/models/database_authenticatable.rb#71
  def valid_password?(password); end

  protected

  # source://devise//lib/devise/models/database_authenticatable.rb#197
  def password_digest(password); end

  # source://devise//lib/devise/models/database_authenticatable.rb#201
  def send_email_changed_notification?; end

  # source://devise//lib/devise/models/database_authenticatable.rb#205
  def send_password_change_notification?; end

  class << self
    # source://devise//lib/devise/models/database_authenticatable.rb#58
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/database_authenticatable.rb#209
module Devise::Models::DatabaseAuthenticatable::ClassMethods
  # source://devise//lib/devise/models/database_authenticatable.rb#216
  def find_for_database_authentication(conditions); end

  # source://devise//lib/devise/models.rb#37
  def pepper; end

  # source://devise//lib/devise/models.rb#47
  def pepper=(value); end

  # source://devise//lib/devise/models.rb#37
  def send_email_changed_notification; end

  # source://devise//lib/devise/models.rb#47
  def send_email_changed_notification=(value); end

  # source://devise//lib/devise/models.rb#37
  def send_password_change_notification; end

  # source://devise//lib/devise/models.rb#47
  def send_password_change_notification=(value); end

  # source://devise//lib/devise/models.rb#37
  def stretches; end

  # source://devise//lib/devise/models.rb#47
  def stretches=(value); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/lockable.rb#24
module Devise::Models::Lockable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Lockable::ClassMethods

  # source://devise//lib/devise/models/lockable.rb#69
  def access_locked?; end

  # source://devise//lib/devise/models/lockable.rb#89
  def active_for_authentication?; end

  # source://devise//lib/devise/models/lockable.rb#95
  def inactive_message; end

  # source://devise//lib/devise/models/lockable.rb#122
  def increment_failed_attempts; end

  # source://devise//lib/devise/models/lockable.rb#42
  def lock_access!(opts = T.unsafe(nil)); end

  # source://devise//lib/devise/models/lockable.rb#27
  def lock_strategy_enabled?(*_arg0, **_arg1, &_arg2); end

  # source://devise//lib/devise/models/lockable.rb#83
  def resend_unlock_instructions; end

  # source://devise//lib/devise/models/lockable.rb#61
  def reset_failed_attempts!; end

  # source://devise//lib/devise/models/lockable.rb#74
  def send_unlock_instructions; end

  # source://devise//lib/devise/models/lockable.rb#127
  def unauthenticated_message; end

  # source://devise//lib/devise/models/lockable.rb#53
  def unlock_access!; end

  # source://devise//lib/devise/models/lockable.rb#27
  def unlock_strategy_enabled?(*_arg0, **_arg1, &_arg2); end

  # source://devise//lib/devise/models/lockable.rb#102
  def valid_for_authentication?; end

  protected

  # source://devise//lib/devise/models/lockable.rb#143
  def attempts_exceeded?; end

  # source://devise//lib/devise/models/lockable.rb#162
  def if_access_locked; end

  # source://devise//lib/devise/models/lockable.rb#147
  def last_attempt?; end

  # source://devise//lib/devise/models/lockable.rb#152
  def lock_expired?; end

  class << self
    # source://devise//lib/devise/models/lockable.rb#29
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/lockable.rb#171
module Devise::Models::Lockable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def last_attempt_warning; end

  # source://devise//lib/devise/models.rb#47
  def last_attempt_warning=(value); end

  # source://devise//lib/devise/models.rb#37
  def lock_strategy; end

  # source://devise//lib/devise/models.rb#47
  def lock_strategy=(value); end

  # source://devise//lib/devise/models/lockable.rb#206
  def lock_strategy_enabled?(strategy); end

  # source://devise//lib/devise/models.rb#37
  def maximum_attempts; end

  # source://devise//lib/devise/models.rb#47
  def maximum_attempts=(value); end

  # source://devise//lib/devise/models/lockable.rb#179
  def send_unlock_instructions(attributes = T.unsafe(nil)); end

  # source://devise//lib/devise/models/lockable.rb#189
  def unlock_access_by_token(unlock_token); end

  # source://devise//lib/devise/models.rb#37
  def unlock_in; end

  # source://devise//lib/devise/models.rb#47
  def unlock_in=(value); end

  # source://devise//lib/devise/models.rb#37
  def unlock_keys; end

  # source://devise//lib/devise/models.rb#47
  def unlock_keys=(value); end

  # source://devise//lib/devise/models.rb#37
  def unlock_strategy; end

  # source://devise//lib/devise/models.rb#47
  def unlock_strategy=(value); end

  # source://devise//lib/devise/models/lockable.rb#200
  def unlock_strategy_enabled?(strategy); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/lockable.rb#173
Devise::Models::Lockable::ClassMethods::BOTH_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://devise//lib/devise/models.rb#5
class Devise::Models::MissingAttribute < ::StandardError
  # source://devise//lib/devise/models.rb#6
  def initialize(attributes); end

  # source://devise//lib/devise/models.rb#10
  def message; end
end

# source://devise//lib/devise/models/recoverable.rb#24
module Devise::Models::Recoverable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Recoverable::ClassMethods

  # source://devise//lib/devise/models/recoverable.rb#37
  def reset_password(new_password, new_password_confirmation); end

  # source://devise//lib/devise/models/recoverable.rb#77
  def reset_password_period_valid?; end

  # source://devise//lib/devise/models/recoverable.rb#50
  def send_reset_password_instructions; end

  protected

  # source://devise//lib/devise/models/recoverable.rb#84
  def clear_reset_password_token; end

  # source://devise//lib/devise/models/recoverable.rb#102
  def clear_reset_password_token?; end

  # source://devise//lib/devise/models/recoverable.rb#98
  def send_reset_password_instructions_notification(token); end

  # source://devise//lib/devise/models/recoverable.rb#89
  def set_reset_password_token; end

  class << self
    # source://devise//lib/devise/models/recoverable.rb#27
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/recoverable.rb#111
module Devise::Models::Recoverable::ClassMethods
  # source://devise//lib/devise/models/recoverable.rb#134
  def reset_password_by_token(attributes = T.unsafe(nil)); end

  # source://devise//lib/devise/models.rb#37
  def reset_password_keys; end

  # source://devise//lib/devise/models.rb#47
  def reset_password_keys=(value); end

  # source://devise//lib/devise/models.rb#37
  def reset_password_within; end

  # source://devise//lib/devise/models.rb#47
  def reset_password_within=(value); end

  # source://devise//lib/devise/models/recoverable.rb#123
  def send_reset_password_instructions(attributes = T.unsafe(nil)); end

  # source://devise//lib/devise/models.rb#37
  def sign_in_after_reset_password; end

  # source://devise//lib/devise/models.rb#47
  def sign_in_after_reset_password=(value); end

  # source://devise//lib/devise/models/recoverable.rb#114
  def with_reset_password_token(token); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/registerable.rb#7
module Devise::Models::Registerable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Registerable::ClassMethods

  class << self
    # source://devise//lib/devise/models/registerable.rb#10
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/registerable.rb#14
module Devise::Models::Registerable::ClassMethods
  # source://devise//lib/devise/models/registerable.rb#21
  def new_with_session(params, session); end

  # source://devise//lib/devise/models.rb#37
  def sign_in_after_change_password; end

  # source://devise//lib/devise/models.rb#47
  def sign_in_after_change_password=(value); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/rememberable.rb#41
module Devise::Models::Rememberable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Rememberable::ClassMethods

  # source://devise//lib/devise/models/rememberable.rb#100
  def after_remembered; end

  # source://devise//lib/devise/models/rememberable.rb#69
  def extend_remember_period; end

  # source://devise//lib/devise/models/rememberable.rb#58
  def forget_me!; end

  # source://devise//lib/devise/models/rememberable.rb#65
  def remember_expires_at; end

  # source://devise//lib/devise/models/rememberable.rb#44
  def remember_me; end

  # source://devise//lib/devise/models/rememberable.rb#50
  def remember_me!; end

  # source://devise//lib/devise/models/rememberable.rb#44
  def remember_me=(_arg0); end

  # source://devise//lib/devise/models/rememberable.rb#103
  def remember_me?(token, generated_at); end

  # source://devise//lib/devise/models/rememberable.rb#86
  def rememberable_options; end

  # source://devise//lib/devise/models/rememberable.rb#73
  def rememberable_value; end

  private

  # source://devise//lib/devise/models/rememberable.rb#124
  def time_from_json(value); end

  class << self
    # source://devise//lib/devise/models/rememberable.rb#46
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/rememberable.rb#132
module Devise::Models::Rememberable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def expire_all_remember_me_on_sign_out; end

  # source://devise//lib/devise/models.rb#47
  def expire_all_remember_me_on_sign_out=(value); end

  # source://devise//lib/devise/models.rb#37
  def extend_remember_period; end

  # source://devise//lib/devise/models.rb#47
  def extend_remember_period=(value); end

  # source://devise//lib/devise/models.rb#37
  def remember_for; end

  # source://devise//lib/devise/models.rb#47
  def remember_for=(value); end

  # source://devise//lib/devise/models/rememberable.rb#147
  def remember_token; end

  # source://devise//lib/devise/models.rb#37
  def rememberable_options; end

  # source://devise//lib/devise/models.rb#47
  def rememberable_options=(value); end

  # source://devise//lib/devise/models/rememberable.rb#139
  def serialize_from_cookie(*args); end

  # source://devise//lib/devise/models/rememberable.rb#134
  def serialize_into_cookie(record); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/timeoutable.rb#22
module Devise::Models::Timeoutable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Timeoutable::ClassMethods

  # source://devise//lib/devise/models/timeoutable.rb#30
  def timedout?(last_access); end

  # source://devise//lib/devise/models/timeoutable.rb#34
  def timeout_in; end

  class << self
    # source://devise//lib/devise/models/timeoutable.rb#25
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/timeoutable.rb#40
module Devise::Models::Timeoutable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def timeout_in; end

  # source://devise//lib/devise/models.rb#47
  def timeout_in=(value); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/trackable.rb#15
module Devise::Models::Trackable
  # source://devise//lib/devise/models/trackable.rb#20
  def update_tracked_fields(request); end

  # source://devise//lib/devise/models/trackable.rb#33
  def update_tracked_fields!(request); end

  protected

  # source://devise//lib/devise/models/trackable.rb#45
  def extract_ip_from(request); end

  class << self
    # source://devise//lib/devise/models/trackable.rb#16
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/validatable.rb#17
module Devise::Models::Validatable
  protected

  # source://devise//lib/devise/models/validatable.rb#59
  def email_required?; end

  # source://devise//lib/devise/models/validatable.rb#55
  def password_required?; end

  class << self
    # source://devise//lib/devise/models/validatable.rb#41
    def assert_validations_api!(base); end

    # source://devise//lib/devise/models/validatable.rb#26
    def included(base); end

    # source://devise//lib/devise/models/validatable.rb#22
    def required_fields(klass); end
  end
end

# source://devise//lib/devise/models/validatable.rb#63
module Devise::Models::Validatable::ClassMethods
  # source://devise//lib/devise/models.rb#37
  def email_regexp; end

  # source://devise//lib/devise/models.rb#47
  def email_regexp=(value); end

  # source://devise//lib/devise/models.rb#37
  def password_length; end

  # source://devise//lib/devise/models.rb#47
  def password_length=(value); end

  class << self
    # source://devise//lib/devise/models.rb#32
    def available_configs; end

    # source://devise//lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise//lib/devise/models/validatable.rb#19
Devise::Models::Validatable::VALIDATIONS = T.let(T.unsafe(nil), Array)

# source://devise//lib/devise.rb#61
Devise::NO_INPUT = T.let(T.unsafe(nil), Array)

class Devise::OmniauthCallbacksController < ::DeviseController
  def failure; end
  def passthru; end

  protected

  def after_omniauth_failure_path_for(scope); end
  def failed_strategy; end
  def failure_message; end
  def translation_scope; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://devise//lib/devise/orm.rb#2
module Devise::Orm
  include ::Devise::Orm::DirtyTrackingOldMethods

  class << self
    # source://devise//lib/devise/orm.rb#3
    def active_record?(model); end

    # source://devise//lib/devise/orm.rb#7
    def active_record_51?(model); end

    # source://devise//lib/devise/orm.rb#11
    def included(model); end
  end
end

# source://devise//lib/devise/orm.rb#19
module Devise::Orm::DirtyTrackingNewMethods
  # source://devise//lib/devise/orm.rb#20
  def devise_email_before_last_save; end

  # source://devise//lib/devise/orm.rb#24
  def devise_email_in_database; end

  # source://devise//lib/devise/orm.rb#40
  def devise_respond_to_and_will_save_change_to_attribute?(attribute); end

  # source://devise//lib/devise/orm.rb#28
  def devise_saved_change_to_email?; end

  # source://devise//lib/devise/orm.rb#32
  def devise_saved_change_to_encrypted_password?; end

  # source://devise//lib/devise/orm.rb#36
  def devise_will_save_change_to_email?; end
end

# source://devise//lib/devise/orm.rb#45
module Devise::Orm::DirtyTrackingOldMethods
  # source://devise//lib/devise/orm.rb#46
  def devise_email_before_last_save; end

  # source://devise//lib/devise/orm.rb#50
  def devise_email_in_database; end

  # source://devise//lib/devise/orm.rb#66
  def devise_respond_to_and_will_save_change_to_attribute?(attribute); end

  # source://devise//lib/devise/orm.rb#54
  def devise_saved_change_to_email?; end

  # source://devise//lib/devise/orm.rb#58
  def devise_saved_change_to_encrypted_password?; end

  # source://devise//lib/devise/orm.rb#62
  def devise_will_save_change_to_email?; end
end

# source://devise//lib/devise/parameter_filter.rb#4
class Devise::ParameterFilter
  # source://devise//lib/devise/parameter_filter.rb#5
  def initialize(case_insensitive_keys, strip_whitespace_keys); end

  # source://devise//lib/devise/parameter_filter.rb#10
  def filter(conditions); end

  # source://devise//lib/devise/parameter_filter.rb#19
  def filtered_hash_by_method_for_given_keys(conditions, method, condition_keys); end

  # source://devise//lib/devise/parameter_filter.rb#31
  def stringify_params(conditions); end

  private

  # source://devise//lib/devise/parameter_filter.rb#40
  def param_requires_string_conversion?(value); end
end

# source://devise//lib/devise/parameter_sanitizer.rb#37
class Devise::ParameterSanitizer
  # source://devise//lib/devise/parameter_sanitizer.rb#44
  def initialize(resource_class, resource_name, params); end

  # source://devise//lib/devise/parameter_sanitizer.rb#110
  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end

  # source://devise//lib/devise/parameter_sanitizer.rb#70
  def sanitize(action); end

  private

  # source://devise//lib/devise/parameter_sanitizer.rb#132
  def cast_to_hash(params); end

  # source://devise//lib/devise/parameter_sanitizer.rb#137
  def default_params; end

  # source://devise//lib/devise/parameter_sanitizer.rb#149
  def empty_params; end

  # source://devise//lib/devise/parameter_sanitizer.rb#157
  def extract_auth_keys(klass); end

  # source://devise//lib/devise/parameter_sanitizer.rb#145
  def hashable_resource_params?; end

  # source://devise//lib/devise/parameter_sanitizer.rb#153
  def permit_keys(parameters, keys); end

  # source://devise//lib/devise/parameter_sanitizer.rb#163
  def unknown_action!(action); end
end

# source://devise//lib/devise/parameter_sanitizer.rb#38
Devise::ParameterSanitizer::DEFAULT_PERMITTED_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

class Devise::PasswordsController < ::DeviseController
  def create; end
  def edit; end
  def new; end
  def update; end

  protected

  def after_resetting_password_path_for(resource); end
  def after_sending_reset_password_instructions_path_for(resource_name); end
  def assert_reset_token_passed; end
  def translation_scope; end
  def unlockable?(resource); end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://devise//lib/devise.rb#56
Devise::ROUTES = T.let(T.unsafe(nil), Hash)

class Devise::RegistrationsController < ::DeviseController
  def cancel; end
  def create; end
  def destroy; end
  def edit; end
  def new; end
  def update; end

  protected

  def account_update_params; end
  def after_inactive_sign_up_path_for(resource); end
  def after_sign_up_path_for(resource); end
  def after_update_path_for(resource); end
  def authenticate_scope!; end
  def build_resource(hash = T.unsafe(nil)); end
  def sign_up(resource_name, resource); end
  def sign_up_params; end
  def translation_scope; end
  def update_needs_confirmation?(resource, previous); end
  def update_resource(resource, params); end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def set_flash_message_for_update(resource, prev_unconfirmed_email); end
  def sign_in_after_change_password?; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://devise//lib/devise/rails/routes.rb#7
module Devise::RouteSet
  # source://devise//lib/devise/rails/routes.rb#8
  def finalize!; end
end

# source://devise//lib/devise.rb#57
Devise::STRATEGIES = T.let(T.unsafe(nil), Hash)

# source://devise//lib/devise/secret_key_finder.rb#4
class Devise::SecretKeyFinder
  # source://devise//lib/devise/secret_key_finder.rb#5
  def initialize(application); end

  # source://devise//lib/devise/secret_key_finder.rb#9
  def find; end

  private

  # source://devise//lib/devise/secret_key_finder.rb#23
  def key_exists?(object); end
end

class Devise::SessionsController < ::DeviseController
  def create; end
  def destroy; end
  def new; end

  protected

  def auth_options; end
  def serialize_options(resource); end
  def sign_in_params; end
  def translation_scope; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def all_signed_out?; end
  def respond_to_on_destroy; end
  def verify_signed_out_user; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://devise//lib/devise.rb#42
module Devise::Strategies; end

# source://devise//lib/devise/strategies/authenticatable.rb#10
class Devise::Strategies::Authenticatable < ::Devise::Strategies::Base
  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def authentication_hash; end

  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def authentication_hash=(_arg0); end

  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def authentication_type; end

  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def authentication_type=(_arg0); end

  # source://devise//lib/devise/strategies/authenticatable.rb#24
  def clean_up_csrf?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def password; end

  # source://devise//lib/devise/strategies/authenticatable.rb#11
  def password=(_arg0); end

  # source://devise//lib/devise/strategies/authenticatable.rb#13
  def store?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#17
  def valid?; end

  private

  # source://devise//lib/devise/strategies/authenticatable.rb#171
  def authenticatable_name; end

  # source://devise//lib/devise/strategies/authenticatable.rb#136
  def authentication_keys; end

  # source://devise//lib/devise/strategies/authenticatable.rb#122
  def decode_credentials; end

  # source://devise//lib/devise/strategies/authenticatable.rb#98
  def http_auth_hash; end

  # source://devise//lib/devise/strategies/authenticatable.rb#83
  def http_authenticatable?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#140
  def http_authentication_key; end

  # source://devise//lib/devise/strategies/authenticatable.rb#93
  def params_auth_hash; end

  # source://devise//lib/devise/strategies/authenticatable.rb#88
  def params_authenticatable?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#157
  def parse_authentication_key_values(hash, keys); end

  # source://devise//lib/devise/strategies/authenticatable.rb#51
  def remember_me(resource); end

  # source://devise//lib/devise/strategies/authenticatable.rb#56
  def remember_me?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#147
  def request_keys; end

  # source://devise//lib/devise/strategies/authenticatable.rb#151
  def request_values; end

  # source://devise//lib/devise/strategies/authenticatable.rb#66
  def valid_for_http_auth?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#77
  def valid_for_params_auth?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#109
  def valid_params?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#104
  def valid_params_request?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#117
  def valid_password?; end

  # source://devise//lib/devise/strategies/authenticatable.rb#37
  def validate(resource, &block); end

  # source://devise//lib/devise/strategies/authenticatable.rb#128
  def with_authentication_hash(auth_type, auth_values); end
end

# source://devise//lib/devise/strategies/base.rb#7
class Devise::Strategies::Base < ::Warden::Strategies::Base
  # source://devise//lib/devise/strategies/base.rb#13
  def mapping; end

  # source://devise//lib/devise/strategies/base.rb#8
  def store?; end
end

# source://devise//lib/devise/strategies/database_authenticatable.rb#8
class Devise::Strategies::DatabaseAuthenticatable < ::Devise::Strategies::Authenticatable
  # source://devise//lib/devise/strategies/database_authenticatable.rb#9
  def authenticate!; end
end

# source://devise//lib/devise/strategies/rememberable.rb#12
class Devise::Strategies::Rememberable < ::Devise::Strategies::Authenticatable
  # source://devise//lib/devise/strategies/rememberable.rb#21
  def authenticate!; end

  # source://devise//lib/devise/strategies/rememberable.rb#41
  def clean_up_csrf?; end

  # source://devise//lib/devise/strategies/rememberable.rb#13
  def valid?; end

  private

  # source://devise//lib/devise/strategies/rememberable.rb#47
  def extend_remember_me?(resource); end

  # source://devise//lib/devise/strategies/rememberable.rb#59
  def remember_cookie; end

  # source://devise//lib/devise/strategies/rememberable.rb#55
  def remember_key; end

  # source://devise//lib/devise/strategies/rememberable.rb#51
  def remember_me?; end
end

# source://devise//lib/devise.rb#64
Devise::TRUE_VALUES = T.let(T.unsafe(nil), Array)

# source://devise//lib/devise.rb#47
module Devise::Test; end

# source://devise//lib/devise/test/controller_helpers.rb#26
module Devise::Test::ControllerHelpers
  extend ::ActiveSupport::Concern

  # source://devise//lib/devise/test/controller_helpers.rb#34
  def process(*_arg0, **_arg1); end

  # source://devise//lib/devise/test/controller_helpers.rb#43
  def setup_controller_for_warden; end

  # source://devise//lib/devise/test/controller_helpers.rb#67
  def sign_in(resource, deprecated = T.unsafe(nil), scope: T.unsafe(nil)); end

  # source://devise//lib/devise/test/controller_helpers.rb#92
  def sign_out(resource_or_scope); end

  # source://devise//lib/devise/test/controller_helpers.rb#48
  def warden; end

  protected

  # source://devise//lib/devise/test/controller_helpers.rb#103
  def _catch_warden(&block); end

  # source://devise//lib/devise/test/controller_helpers.rb#126
  def _process_unauthenticated(env, options = T.unsafe(nil)); end
end

# source://devise//lib/devise/test/integration_helpers.rb#21
module Devise::Test::IntegrationHelpers
  include ::Warden::Test::Helpers

  # source://devise//lib/devise/test/integration_helpers.rb#37
  def sign_in(resource, scope: T.unsafe(nil)); end

  # source://devise//lib/devise/test/integration_helpers.rb#46
  def sign_out(resource_or_scope); end

  protected

  # source://devise//lib/devise/test/integration_helpers.rb#54
  def setup_integration_for_devise; end

  # source://devise//lib/devise/test/integration_helpers.rb#58
  def teardown_integration_for_devise; end

  class << self
    # source://devise//lib/devise/test/integration_helpers.rb#22
    def included(base); end
  end
end

# source://devise//lib/devise/test_helpers.rb#4
module Devise::TestHelpers
  include ::Devise::Test::ControllerHelpers

  class << self
    # source://devise//lib/devise/test_helpers.rb#5
    def included(base); end
  end
end

# source://devise//lib/devise/time_inflector.rb#6
class Devise::TimeInflector
  include ::ActionView::Helpers::DateHelper

  class << self
    # source://devise//lib/devise/time_inflector.rb#10
    def instance; end

    # source://devise//lib/devise/time_inflector.rb#11
    def time_ago_in_words(*_arg0, **_arg1, &_arg2); end
  end
end

# source://devise//lib/devise/token_generator.rb#6
class Devise::TokenGenerator
  # source://devise//lib/devise/token_generator.rb#7
  def initialize(key_generator, digest = T.unsafe(nil)); end

  # source://devise//lib/devise/token_generator.rb#12
  def digest(klass, column, value); end

  # source://devise//lib/devise/token_generator.rb#16
  def generate(klass, column); end

  private

  # source://devise//lib/devise/token_generator.rb#28
  def key_for(column); end
end

# source://devise//lib/devise.rb#58
Devise::URL_HELPERS = T.let(T.unsafe(nil), Hash)

class Devise::UnlocksController < ::DeviseController
  def create; end
  def new; end
  def show; end

  protected

  def after_sending_unlock_instructions_path_for(resource); end
  def after_unlock_path_for(resource); end
  def translation_scope; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class DeviseController < ::ApplicationController
  include ::Devise::Controllers::ScopedViews
  extend ::Devise::Controllers::ScopedViews::ClassMethods

  def _prefixes; end

  protected

  def assert_is_devise_resource!; end
  def clean_up_passwords(object); end
  def devise_i18n_options(options); end
  def devise_mapping; end
  def find_message(kind, options = T.unsafe(nil)); end
  def navigational_formats; end
  def require_no_authentication; end
  def resource; end
  def resource=(new_resource); end
  def resource_class; end
  def resource_name; end
  def resource_params; end
  def respond_with_navigational(*args, &block); end
  def scope_name; end
  def set_flash_message(key, kind, options = T.unsafe(nil)); end
  def set_flash_message!(key, kind, options = T.unsafe(nil)); end
  def set_minimum_password_length; end
  def signed_in_resource; end
  def successfully_sent?(resource); end
  def translation_scope; end
  def unknown_action!(msg); end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://responders/3.1.0/lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to; end

    # source://responders/3.1.0/lib/action_controller/respond_with.rb#11
    def responder; end
  end
end

module DeviseController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::DeviseHelper

  def devise_mapping(*args, **_arg1, &block); end
  def resource(*args, **_arg1, &block); end
  def resource_class(*args, **_arg1, &block); end
  def resource_name(*args, **_arg1, &block); end
  def resource_params(*args, **_arg1, &block); end
  def scope_name(*args, **_arg1, &block); end
  def signed_in_resource(*args, **_arg1, &block); end
end

module DeviseHelper
  def devise_error_messages!; end
end

module Warden::Mixins; end

# source://devise//lib/devise/rails/warden_compat.rb#3
module Warden::Mixins::Common
  # source://devise//lib/devise/rails/warden_compat.rb#12
  def cookies; end

  # source://warden/1.2.9/lib/warden/mixins/common.rb#32
  def params; end

  # source://warden/1.2.9/lib/warden/mixins/common.rb#9
  def raw_session; end

  # source://devise//lib/devise/rails/warden_compat.rb#4
  def request; end

  # source://devise//lib/devise/rails/warden_compat.rb#8
  def reset_session!; end

  # source://warden/1.2.9/lib/warden/mixins/common.rb#9
  def session; end

  # source://warden/1.2.9/lib/warden/mixins/common.rb#25
  def warden_cookies; end
end
